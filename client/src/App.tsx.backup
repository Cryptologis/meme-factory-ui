import { useState } from "react";
import { Switch, Route, useLocation } from "wouter";
import { queryClient } from "./lib/queryClient";
import { QueryClientProvider } from "@tanstack/react-query";
import { Toaster } from "@/components/ui/toaster";
import { TooltipProvider } from "@/components/ui/tooltip";
import { WalletProvider } from "@/components/WalletProvider";
import ThemeToggle from "@/components/ThemeToggle";
import WalletConnectionModal from "@/components/WalletConnectionModal";
import HomePage from "@/pages/HomePage";
import CreateTokenPage from "@/pages/CreateTokenPage";
import TradePage from "@/pages/TradePage";
import TokenDetailPage from "@/pages/TokenDetailPage";
import NotFound from "@/pages/not-found";
import { useWallet } from "@/hooks/useWallet";
import { useWalletModal } from "@solana/wallet-adapter-react-ui";

function Router() {
  return (
    <Switch>
      <Route path="/" component={HomePage} />
      <Route path="/create" component={CreateTokenPage} />
      <Route path="/trade" component={TradePage} />
      <Route path="/token/:mintAddress" component={TokenDetailPage} />
      <Route component={NotFound} />
    </Switch>
  );
}

function AppContent() {
  const [walletModalOpen, setWalletModalOpen] = useState(false);
  const [location, setLocation] = useLocation();
  const { publicKey, connected, disconnect, balance } = useWallet();
  const { setVisible } = useWalletModal();

  const handleConnectWallet = () => {
    setVisible(true);
  };

  const handleDisconnect = () => {
    disconnect();
  };

  const handleSelectWallet = (wallet: string) => {
    console.log("Selected wallet:", wallet);
    setWalletModalOpen(false);
  };

  return (
    <><TooltipProvider>
      <div className="min-h-screen bg-background">
        <div className="flex items-center justify-between px-4 sm:px-6 lg:px-8 h-16 border-b sticky top-0 z-50 backdrop-blur-xl bg-background/80">
          <div className="flex items-center gap-8">
            <a href="/" className="flex items-center gap-2 font-bold text-xl">
              <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-primary to-chart-2 flex items-center justify-center">
                <span className="text-white font-bold">M</span>
              </div>
              Meme Factory
            </a>
            <nav className="hidden md:flex items-center gap-6">

              href="/"
              className={`text-sm font-medium transition-colors hover:text-primary ${location === "/" ? "text-foreground" : "text-muted-foreground"}`}
              >
              Marketplace
            </a>

            href="/create"
            className={`text-sm font-medium transition-colors hover:text-primary ${location === "/create" ? "text-foreground" : "text-muted-foreground"}`}
            >
            Create Token
          </a>

          href="/trade"
          className={`text-sm font-medium transition-colors hover:text-primary ${location === "/trade" ? "text-foreground" : "text-muted-foreground"}`}
          >
          Trade
        </a>
      </nav>
    </div><div className="flex items-center gap-4">
        <ThemeToggle />

        {connected ? (
          <div className="flex items-center gap-3">
            <div className="hidden sm:block text-right">
              <div className="text-sm font-medium">
                {publicKey?.toString().slice(0, 4)}...{publicKey?.toString().slice(-4)}
              </div>
              <div className="text-xs text-muted-foreground">
                {balance?.toFixed(2)} SOL
              </div>
            </div>
            <button
              onClick={handleDisconnect}
              className="px-4 py-2 text-sm font-medium rounded-lg border hover:bg-accent transition-colors"
            >
              Disconnect
            </button>
          </div>
        ) : (
          <button
            onClick={handleConnectWallet}
            className="px-4 py-2 text-sm font-medium rounded-lg bg-primary text-primary-foreground hover:bg-primary/90 transition-colors"
          >
            Connect Wallet
          </button>
        )}
      </div></>
        </div>

        <><Router /><Toaster /><WalletConnectionModal
            open={walletModalOpen}
            onClose={() => setWalletModalOpen(false)}
            onSelectWallet={handleSelectWallet} /></>
      </div>
    </TooltipProvider>
  );
}

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <WalletProvider>
        <AppContent />
      </WalletProvider>
    </QueryClientProvider>
  );
}

export default App;
